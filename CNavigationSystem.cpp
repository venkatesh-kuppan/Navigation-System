/* Generated by Together */

#include "CNavigationSystem.h"


void CNavigationSystem::run()
{
	/**
	 * Database creation
	 */
	CPOI Restaurant_POI(Restaurant_e,"Pizza Hut","Best pizza in darmstadt",13.45,23.65);
	m_POIDB.addPOI(Restaurant_POI);
	CPOI HotelPOI(Restaurant_e,"Contel","Budget Hotel in Darmstadt",33.61,43.07);
	m_POIDB.addPOI(HotelPOI);
	CPOI KrankenHausPOI(Krankenhaus_e,"Krankenhaus","TK- Always for you",53.18,73.32);
	m_POIDB.addPOI(KrankenHausPOI);
	CPOI BusStn(BusStation_e,"BusStation","Pfnor-Strasse",53.24,49.91);
	m_POIDB.addPOI(BusStn);
	CPOI SchoolPOI(School_e,"H_DA","Hochschule Darmstadt - University of Applied Sciences",72.45,62.35);
	m_POIDB.addPOI(SchoolPOI);
	CPOI MonumentPOI(Monument_e,"Kirche","The oldest Kirche in Darmstadt",65.20,12.67);
	m_POIDB.addPOI(MonumentPOI);
	/**
	 * Addition of 1 extra member in database to check error handling of database.
	 * In all 10 members are added to the database.
	 */
	for(int i =0; i<4; i++)
	{
		CPOI PizzaPOI(Restaurant_e,"Pizza Hut","Best pizza in darmstadt",13.45,23.65);
		m_POIDB.addPOI(PizzaPOI);
	}
	//cout << " =======POI Database ==================================================="<<endl;
	//m_POIDB.print();

	/**
	 * WayPoint Database creation.
	 */
	CWayPoint wp1("Darmstadt",13.45,34.67);
	m_WaypointDB.addWayPoint(wp1);
	CWayPoint wp2("Munchen",78.98,45.67);
	m_WaypointDB.addWayPoint(wp2);
	CWayPoint wp3("Frankfurt",89.09,12.56);
	m_WaypointDB.addWayPoint(wp3);
	CWayPoint wp4("Stuttgart",12.04,69.47);
	m_WaypointDB.addWayPoint(wp4);

	//cout << " =======Waypoint Database ==================================================="<<endl;
	//m_WaypointDB.print();
	/**
	 * enter the route with waypoints and POIs
	 */
	enterRoute();
	/**
	 * print the route defined
	 */
	printRoute();
	/**
	 * print the distance of the next nearest POI from the co-ordinates
	 * by the user.
	 */
	printDistanceFrmCurRouteToNxtPOI();
}

CNavigationSystem::CNavigationSystem()
{

}

void CNavigationSystem::enterRoute()
{

	/**
	 * connect to the main database which holds list of all valid POIs
	 */
	m_Route.connectToPoiDatabase(&m_POIDB);
	m_Route.connectToWpDatabase(&m_WaypointDB);
	/**
	 * add way points to the route
	 */
	m_Route.addWaypoint("Darmstadt");
	m_Route.addWaypoint("Frankfurt");
	m_Route += "Munchen";
	m_Route.addWaypoint("Karlsruhe");//invalid Waypoint


#if 0
	m_Route += "Darmstadt";
	m_Route += "Frankfurt";
	m_Route += "Kirche";
	m_Route += "BusStation";
	m_Route += "Karlsruhe";
	m_Route += "Contel";
	m_Route += "Frankfurt";
#endif
	/**
	 * add POIs to the route.
	 */
	m_Route.addPoi("Krankenhaus","Darmstadt");	//valid POI
	m_Route.addPoi("BusStation","Munchen");	//valid POI
	m_Route += "Kirche";
	m_Route += "Contel";


	//m_Route.addPoi("Contel","Frankfurt");		//valid POI.
	//m_Route.addPoi("Kirche","Darmstadt");
	/**
	 * assignment operator test
	 */
	CRoute AsgndRoute;
	AsgndRoute = m_Route += "Pizza Hut";
	cout<<"----------Assignment Operator Test------------"<<endl;
	cout<<"Assigned Route contains = "<<AsgndRoute.getNxtWp()<<" way points"<<endl;
	cout<<"Assigned Route list size = "<<AsgndRoute.getList().size()<<endl;
	AsgndRoute.print();


	m_Route.addPoi("Deutsche Bahnhof","Munchen"); //invalid POI
	//m_Route.addPoi("H_DA");

	/**
	 * Test for + operator
	 * create another route
	 */
	CRoute newRoute;
	newRoute.connectToPoiDatabase(&m_POIDB);
	newRoute.connectToWpDatabase(&m_WaypointDB);

	newRoute.addWaypoint("Frankfurt");
	newRoute.addWaypoint("Darmstadt");
    newRoute.addPoi("H_DA","Darmstadt");
	CRoute XRoute;
	XRoute =  (m_Route + newRoute);
	cout<<"-------------- + operator test----------------"<<endl;
	cout<<"new Route contains = "<<XRoute.getNxtWp()<<" way points"<<endl;
	cout<<"new Route list size = "<<XRoute.getList().size()<<endl;
	XRoute.print();
}

void CNavigationSystem::printRoute()
{
	/**
	 * print the complete route with waypoints and POIs.
	 */
	m_Route.print();
}

void CNavigationSystem::printDistanceFrmCurRouteToNxtPOI()
{
	CWayPoint CurPosWp;
	/**
	 * get the current position from the user.
	 */
	CurPosWp = m_GPSSensor.getCurrentPosition();
	CPOI nextNearPOI;
	double distOfNearestPOI;

	/**
	 * calculate the distance of next POI.
	 */
	distOfNearestPOI = m_Route.getDistanceNextPoi(CurPosWp,nextNearPOI);
	if(DEFAULT_VALUE_FOR_NO_POI != distOfNearestPOI)
	{
		cout<<"Distance of the nearest POI = "<<distOfNearestPOI <<endl;
		cout<< "Details about the nearest POI are as folows:"<<endl;
		nextNearPOI.print(DEGMMSS_FORMAT);
	}
}
