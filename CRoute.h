/* Generated by Together */

#ifndef CROUTE_H
#define CROUTE_H

#include <list>

#include "CPOIDataBase.h"
#include "CWpDatabase.h"
#include "CWayPoint.h"
class CPOI;

#define DEFAULT_VALUE_FOR_NO_POI 0xFFFF

/**
 * The CRoute class  defines the route i.e a route made up of waypoints and POIs.
 * The class provides mechanism to add waypoints and POIs to the given route. The POIs are a part of the main database.
 */
class CRoute {
public:

	typedef std::list<CWayPoint*> CWayPointList;
    /**
     * The overloaded constructor used to initialize the max no. of waypoints and max no. of POIs required in a route. 
     */
    CRoute();

    /**
     * The copy constructor. 
     */
    CRoute(CRoute const& origin);

    ~CRoute();

    /**
     * The API is used to connect to the original database, which consists the total POIs.
     * 
     * Arguments:
     * 
     * CPOIDataBase* pPOIDatabase : The address of the POI database created.
     * 
     * Return:
     * None.
     */
    void connectToPoiDatabase(CPOIDataBase* pPOIDatabase = NULL);

    void connectToWpDatabase(CWpDatabase* pWpDatabase);

    /**
     * API to add the waypoints in the Route.
     * 
     * Arguments:
     *  nameWp : The name of the waypoint to be added to the route.
     * 
     * Return:
     * None
     */
    void addWaypoint(string nameWp);

    /**
     * API to add the POIs in the route. Only valid POIs will be accepted, invalid POIs(POIs not present in POIDatabase) will be represented with an ERROR message.
     * 
     * Arguments:
     * 
     * string namePOI : the name of the POI to be added to the route.
     * 
     * Return:
     * None.
     */
    void addPoi(string namePOI, string afterWp);

    /**
     * The API gets the distance of the next nearest POI from the current location.
     * 
     * Arguments:
     * 
     * CWayPoint const& wp[IN Parameter]: The waypoint object which is an input for the distance to be calculated. The waypoint object will be created based on the inputs provided by the user.
     * 
     * CPOI& poi[OUT Parameter]: The reference for the POI on the route which is nearest to the co-ordinates inputted by the user.
     * 
     * Returns:
     * double: The least distance between the waypoint and the next nearest POI.
     */
    double getDistanceNextPoi(CWayPoint const& wp, CPOI& poi);

    /**
     * prints the details of the route.
     * Details consists of the waypoints and the POIs on the given route.
     * 
     * Arguments:
     * 
     * None.
     * 
     * Return:
     * None.
     */
    void print();

    CRoute& operator = (const CRoute& Route);
    CRoute& operator += (const string& name);
    CRoute operator + (const CRoute& RouteY);
    int getNxtWp(void);
    const CWayPointList& getList();

private:

    /**
     * to hold the index of the next waypoints 
     */
    unsigned int m_nextWp;

    /**
     * index to hold the next POI in the route 
     */
    unsigned int m_nextPOI;

    /**
     * the address of the POI Database to be searched for.
     * @clientCardinality 1*/
    CPOIDataBase* m_pPOIDatabase;

    /**
     * the address of the Waypoint Database to be searched for. 
     */
    CWpDatabase* m_pWpDatabase;

    /**
     * The list which holds all the waypoints and the POIs in the route. 
     */
    CWayPointList m_pRoute;
};
#endif //CROUTE_H
