/* Generated by Together */

#include "CCSVManager.h"
#include "CPersistentStorage.h"

using namespace std;
extern const char* POIType_ar[];

CCSVManager::CCSVManager()
{

}

CCSVManager::~CCSVManager()
{

}

void CCSVManager::setMediaName(std::string name)
{
	/**
	 * set the file name.
	 */
	m_WpFileName = name + "_wp.txt";
	m_POIFileName = name + "_poi.txt";
}

bool CCSVManager::writeData(const CWpDatabase& wpDB, const CPOIDataBase& poiDB)
{
	cout<<"CCSV Manager::writedata =============================="<<endl;
	cout<<"Wp size = "<<wpDB.getWaypointMap().size()<<endl;
	bool isFileWriteSuccessful_bo = false;
	fstream FileObj;
	CWpDatabase::Waypoint_map Wp_map = wpDB.getWaypointMap();
	/**
	 * open the way pointfile
	 */
	FileObj.open(m_WpFileName.c_str());

	cout<<"Poi size = "<<poiDB.getPOIMap().size()<<endl;
	if(FileObj.is_open()) {
		/**
		 * iterate the list and output to the file.
		 */
		for(CWpDatabase::Waypoint_map::const_iterator c_it = Wp_map.begin(); c_it != Wp_map.end();++c_it)
		{
				FileObj<<(c_it->second.getName())<<";" << (c_it->second.getLatitude())<<";" <<(c_it->second.getLongitude());
				FileObj<<endl;
		}
		isFileWriteSuccessful_bo = true;
		/**
		* close the file after write
		*/
		FileObj.close();
	}
	else {
		cout << "EROR: waypoint File write failed"<<endl;
	}

	/**
	 * set variable to false for checking the second file.
	 */
	isFileWriteSuccessful_bo = false;
	/**
	 * open the way pointfile
	 */
	FileObj.open(m_POIFileName.c_str());

	if(FileObj.is_open()) {
		/**
		 * iterate the POI DB and output to the file
		 */
		double latitdue,longitude;
		string name,description;
		t_poi poi_type;
		CPOIDataBase::POI_map poiMap = poiDB.getPOIMap();
		for(CPOIDataBase::POI_map::const_iterator c_it = poiMap.begin(); c_it != poiMap.end(); ++c_it )
		{
			c_it->second.getAllDataByReference(latitdue,longitude,name,poi_type,description);
			FileObj<<POIType_ar[poi_type]<<";"<<name<<";"<<description \
					<<";"<<latitdue<<";"<<longitude;
			FileObj<<endl;
		}
		cout<<" poi write end"<<endl;
		isFileWriteSuccessful_bo = true;
		/**
		 * close the file after write
		 */
		FileObj.close();
	}
	else {
		cout<<"ERROR: POI file write failed."<<endl;
	}
	return isFileWriteSuccessful_bo;
}

bool CCSVManager::readData(CWpDatabase& wpDB, CPOIDataBase& poiDB,MergeMode_en mode)
{
	return (readWaypointData(wpDB,mode) && readPOIData(poiDB,mode));
}

bool CCSVManager::readPOIData(CPOIDataBase& poiDB, MergeMode_en mode)
{
	ifstream inFile;
	bool isPoiFileReadSuccess = false;
	/**
	 * open the file
	 */
	inFile.open(m_POIFileName.c_str());
	/**
	 * check if file open is successful
	 */
	if(inFile.is_open()) {
		string ReadLine;
		double Coordinate_ar[2];
		string lineString;
		string lineToken[5];
		/**
		 * create a temp. waypoint DB object required in case the access mode is replace
		 */
		CPOIDataBase TempPoiDBObj;
		while(getline(inFile,ReadLine)) {
			/**
			 * get the name, latitude and longitude from the read line.
			 */
			stringstream lineStream(ReadLine);
			int i=0;
			while(std::getline(lineStream,lineString,';'))
			{
				lineToken[i++]=lineString;
				//i++;
			}
			//lineStream >> Coordinate_ar[0] >> Coordinate_ar[1];
			t_poi poiType = (t_poi)atoi(lineToken[0].c_str());
			Coordinate_ar[0] = atof(lineToken[3].c_str());
			Coordinate_ar[1] = atof(lineToken[4].c_str());
			/**
			 * create a CPOI new object with the extracted  data from the file.
			 */
			CPOI poiObj(poiType,lineToken[1],lineToken[2],Coordinate_ar[0],Coordinate_ar[1]);
			if(Merge_e == mode) {
				/**
				 * add poi to the end of existing DB
				 */
				poiDB.addPOI(poiObj);
			}
			else {
				/**
				 * add poi to the temp POI DB to be used later to replace the existing DB.
				 */
				TempPoiDBObj.addPOI(poiObj);
			}
			/**
			 * clear the existing database.
			 * and assign the new database to the passed reference.
			 */
			if(Replace_e == mode) {
				poiDB.clearPOIDatabase();
				poiDB = TempPoiDBObj;
			}
			isPoiFileReadSuccess = true;
			inFile.close();
		}
	}
	else {
		cout<< "ERROR: POI file open fail"<<endl;
	}
	return isPoiFileReadSuccess;
}

bool CCSVManager::readWaypointData(CWpDatabase& wpDB, MergeMode_en mode)
{
	ifstream inFile;
	bool isWpFileReadSuccess = false;
	/**
	 * read the waypoint file
	 */
	inFile.open(m_WpFileName.c_str());

	/**
	 * if file is open proceed with further operations
	 */
	if(inFile.is_open()) {
		string ReadLine;
		double Coordinate_ar[2];
		string lineString;
		string lineToken[3];
		/**
		 * create a temp. waypoint DB object required in case the access mode is replace
		 */
		CWpDatabase TempWpDBObj;
		while(getline(inFile,ReadLine)) {
			/**
			 * get the name, latitude and longitude from the read line.
			 */
			stringstream lineStream(ReadLine);
			int i=0;
			while(std::getline(lineStream,lineString,';'))
			{
				lineToken[i++]=lineString;
			}
			/**
			 * convert the string to appropriate format to create waypoint object.
			 */
			Coordinate_ar[0] = atof(lineToken[1].c_str());
			Coordinate_ar[1] = atof(lineToken[2].c_str());
			/**
			 * create a CWaypoint new object with the extracted  data from the file.
			 */
			CWayPoint WpObj(lineToken[0],Coordinate_ar[0],Coordinate_ar[1]);
			if(Merge_e == mode) {
				wpDB.addWayPoint(WpObj);
			}
			else {
				/**
				 * if the mode is replace, add the created waypoint object to the temp WpDB obj.
				 */
				TempWpDBObj.addWayPoint(WpObj);
			}
		}
		/**
		 * clear the existing database.
		 * and assign the new database to the passed reference.
		 */
		if(Replace_e == mode) {
			wpDB.clearWaypointDatabase();
			wpDB = TempWpDBObj;
		}
		isWpFileReadSuccess = true;
		inFile.close();
	}
	else {
		cout<<"ERROR : waypoint file open failed"<<endl;
	}

	return isWpFileReadSuccess;
}
